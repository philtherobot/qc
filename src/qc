#!/usr/bin/env bash

configroot="${HOME}/.quicksee"

configfile="${configroot}/config.sh"
if [[ -e "${configfile}" ]]
then
    source "${configfile}"
fi

positional=()
while [[ ${#} -gt 0 ]]
do
    case "${1}" in
        -f)
        force_compile=1
        shift
        ;;

        -v) 
        verbose=1 
        shift
        ;;

        *)
        positional+=("${1}")
        shift
        ;;
    esac
done

set -- "${positional[@]}" # restore positional parameters

function trace
{
    if [[ -n "${verbose}" ]]
    then
        echo trace: ${*}
    fi
}

function error
{
    (>&2 echo error: ${*})
    exit 1
}

source="$(readlink -f "${1}")"  # absolute path
source_basename=$(basename "${source}")

shift 1

saved_pwd="${PWD}"

cache_dir="${configroot}/cache/$(hostname)/${source}"
# cache is based on hostname and absolute path of source file
trace cache directory = ${cache_dir}

object="${cache_dir}/${source_basename}.o"


declare -a dependencies=("${source}")

while [[ ${#dependencies[@]} -ne 0  &&  -z "${force_compile}" ]]
do
    # Debug stack of dependencies
    if [[ -n "${verbose}" ]] ; then declare -p dependencies; fi

    # Pop first element
    d="${dependencies[0]}"
    dependencies=("${dependencies[@]:1}")

    trace checking up to date ${d}

    if [[ "${d}" -nt "${object}" ]]
    then
        changed=1
        break
    fi

    declare -a inclusions
    OLDIFS=${IFS}
    IFS=$'\n'
    inclusions=($(sed -n 's/^ *\# *include *"\(.*\)"/\1/p' "${d}"))
    IFS=${OLDIFS}

    if [[ ${?} -ne 0 ]]
    then
        error failure checking dependencies
        exit 1
    fi

    # Debug newly found dependencies
    if [[ -n "${verbose}" ]] ; then declare -p inclusions; fi

    cd "$(dirname "${d}")" # So that includes are relative to the file location

    while [[ ${#inclusions[@]} -ne 0 ]]
    do
        # Pop first element
        i="${inclusions[0]}"
        inclusions=("${inclusions[@]:1}")

        dependencies+=("$(readlink -f "${i}")")
    done
done


cd "${saved_pwd}"


exe="${cache_dir}/executable"


if [[ -n "${changed}"  ||  -n "${force_compile}" ]]
then
    trace compiling ${source}...

    mkdir -p "${cache_dir}"

    if ! ( grep -v '^#!' "${source}" | g++ -x c++ -c ${OPTS} ${DEFINES} ${INCPATHS} -o "${object}" - )
    then
        rm -f "${object}"
        exit 1
    fi

    trace linking ${exe}...
    g++ -o "${exe}" "${object}" ${LIBS}
fi

"${exe}" "${@}"
