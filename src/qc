#!/usr/bin/env bash

### Compiler config

case `hostname` in
spica) 
    QT_INCPATHS_PLATFORM=/opt/Qt/5.4/gcc/include
    QT_MAKESPEC_PLATFORM=/opt/Qt/5.4/gcc/mkspecs/linux-g++
    # from qmake: -Wl,-O1 -Wl,-rpath,/opt/Qt/5.4/gcc -Wl,-rpath,/opt/Qt/5.4/gcc/lib
    OPTS_PLATFORM="-fPIE"
    LFLAGS="-L/opt/Qt/5.4/gcc/lib -Wl,-O1 -Wl,-rpath,/opt/Qt/5.4/gcc -Wl,-rpath,/opt/Qt/5.4/gcc/lib"
    ;;
*) 
    QT_INCPATHS_PLATFORM=/usr/include/qt5
    QT_MAKESPEC_PLATFORM=/usr/lib/qt5/mkspecs/cygwin-g++
    ;;
esac

QT_DEFINES="-DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB"
QT_INCPATHS="-I$QT_MAKESPEC_PLATFORM -I$QT_INCPATHS_PLATFORM -I$QT_INCPATHS_PLATFORM/QtGui -I$QT_INCPATHS_PLATFORM/QtCore -I$QT_INCPATHS_PLATFORM/QtPrintSupport"
QT_LIBS="-lQt5Gui -lQt5Core -lQt5PrintSupport -lGL -lpthread"

DEFINES="-D_REENTRANT $QT_DEFINES"
INCPATHS=$QT_INCPATHS
LIBS=$QT_LIBS

OPTS="-pipe -Wall -W -Werror=return-type -std=gnu++11 $OPTS_PLATFORM"

## End compiler config


top_source=$(readlink -f $1)

shift 1

saved_pwd=$PWD

cache=~/.qc/cache

hostn=`hostname`

project=()
to_compile=($top_source)

need_link=0

while [ ${#to_compile[@]} -ne 0 ]
do
    source=${to_compile[0]}
    to_compile=(${to_compile[@]:1})

    #echo handling $source

    imports=(`sed -n 's/^ *# *pragma *qc_import *(\(.*\))/\1/p' $source`)
    imported_sources=(${imports[@]/%/.cpp})
    imported_headers=(${imports[@]/%/.hpp})

    headers_dquote=(`sed -n 's/^ *# *include *\"\(.*\)\"/\1/p' $source`)

    headers=(${imported_headers[@]} ${headers_dquote[@]})

    object=$cache/$hostn/$source.o

    cd $(dirname $source)

    changed=0
    if [ $source -nt $object ]
    then changed=1
    else
        for h in "${headers[@]}"
        do
            if [ $h -nt $object ]; then changed=1; break; fi
        done
    fi

    if [ $changed -ne 0 ]
    then
        #opts=$(sed -n 's/^ *# *pragma *qc_gcc *(\(.*\))/\1/p' $pgm)

        output_dir=$(dirname $object)
        mkdir -p $output_dir

        #echo compiling $source...

        gcc_args="-x c++ -c $OPTS $DEFINES $INCPATHS -o $object -"
        #echo $gcc_args
        if ! ( grep -v '^#!' $source | 
               sed 's/^ *# *pragma *qc_import *(\(.*\))/#include "\1.hpp"/' |
               g++ $gcc_args )
        then
            echo $source failed to compile
            echo command: g++ $gcc_args
            rm -f $object
            exit 1
        fi

        need_link=1

    fi

    project=(${project[@]} $object)

    for s in "${imported_sources[@]}"
    do
        s=$(readlink -f $s)
        
        found=0
        for t in "${to_compile[@]}"
        do
        	if [[ $t == $s ]] ; then found=1; fi
        done
        if [[ found -eq 0 ]]; then
        	to_compile=(${to_compile[@]} $s)
        fi
    done

done

exe=$cache/$hostn/$top_source.executable

if [[ $need_link -ne 0 || ! -e $exe ]]
then
	gcc_args="$LFLAGS -o $exe ${project[@]} $LIBS"
    if ! g++ $gcc_args
    then
    	echo failed to link
    	echo command: g++ $gcc_args
    	exit 1
    fi
fi

cd $saved_pwd
$exe $*

